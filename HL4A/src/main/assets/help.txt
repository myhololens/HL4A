
欢迎使用 HL4A

简单帮助 : 

文件地址简写 : 
没有前缀 : SD卡下文件
% : SD卡下文件
# : 安装包脚本目录
@ : 安装包目录
$ : 私有文件目录

跳转界面机制 : 
可以跳转后缀为
.js .lua .bsh(.java)四种
其他后缀全部跳转js界面

后面说一下，JS的反射，
错误处理，比LUA和BSH强太多了

语法上呢？js功能强大，需要更规范
lua则是更简单，但是lua的错误处理
只能显示大概。因为错误在native产生
无法整个读取解析

不过不得不说LUA速度真的快
10几k的代码随便就跑过了

至于bsh，，脚本java？
接口也没几个全靠eval的。。

rhino js特性简介

支持java变参
可以使用
Packages.类名访问类
可以直接对类访问方法/实例化

调用方法时会自动把方法
转换成需要的interface接口

使用importPackage(Packages.包名)
导入该包名下所有类，相当于java的
import 包名.*;

lua特性介绍:

不支持变参 这意味着
有些方法需要这样传参

Object{参数1,参数2}

空参数:Object[0]


导类实例:

导入类 "java.io.File"
导入泛类 "java.io"

lua导入泛类其实没有导入
只是加在一个表里，
找不到了一个一个取类
就造成了全部导入的假象

lua getter和setter

可以省略 getxxx() 取xxx()
直接使用 .xxx 访问

可以申省略 serxxx(y) 置xxx(y)
直接使用 .xxx = y 访问

注意，取 和 置 的优先级比 get和set高

lua 选择 :

local 返回值 = 选择(变量){
值1 = function()
return "这是1";
end,
值2 = 233333;
}

变量 = "值1"
执行函数。返回这是1
变量 = "置2"
直接返回 233333

相当于java和js的switch

bsh(java语法)特性介绍:

无需使用String a = "内容"
这样的语法来赋值(不用指定类型)
可以直接 a = "内容"

不支持变参 这意味着
有些方法需要这样传参
new Object[]{参数1,参数2}

默认变量介绍 : 

当前上下文 activity或是service
当前界面 当前的activity对象
当前服务 当前的service对象
当前环境 当前的脚本环境

向窗口输出 : 
弹窗.提示("233333")

文件操作:
字符.读取(地址)
//读取字符串
字节.读取(地址)
//读取字节串
字符.保存(地址,内容)
字节.保存(地址,内容)

都是很简单的，
具体的各种中文API
请使用MT管理器查看DEX

简单实例请查看
安装包/script/index.js